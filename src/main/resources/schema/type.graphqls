# Define the custom scalar for Long
scalar Long
# Define the custom scalar for LocalDateTime
scalar LocalDateTime
# Define the custom scalar for LocalDate
scalar LocalDate

# QUERY
type Query {
    # one time password
    getOTP(id: ID!): OneTimePasswordEntityDB

    #business group
    getBusinessGroup(page: Int, size: Int): [BusinessGroupDB]

    #get userInfo based on userName
    getUserInfo(userName: String): EmployeeInfoDB

    #get roleMaster
    getAllRolesMaster: [RoleMasterDB]
    getRolesMasterId(roleMasterId: Long): RoleMasterDB

    #get departmentMaster
    getAllDepartmentMaster: [DepartmentMasterDB]
    getDepartmentMasterId(departmentMasterId: Long): DepartmentMasterDB

    #get patientDetails
    patientSearchList(patientSearchQuery : String) : [PatientSearch]

    #get patientConsultation
    fetchPatientConsultation(doctorCode : String, type : String, page : Int, size : Int, date : LocalDate, consultationStatus : String) : [PatientConsultationDB]
    patientCountBasedOnTypeAndDoctorCode(type : String, doctorCode : String) : Long

    #get holiday master
    getHolidayMasterById(holidayMasterId: Long): HolidayMasterDB
    getHolidayMasterByIds(holidayMasterIds: [Long]) : [HolidayMasterDB]
    getAllHolidays: [HolidayMasterDB]

    #get blocks master
    getAllBlocksMaster: [BlockDetailsMasterDB]
    getAllBlockById(blockMasterId: Long): BlockDetailsMasterDB
    getAllBlockByIds(blockMasterIds: [Long]) : [BlockDetailsMasterDB]

    #get employee schedules
    getAllEmployeeSchedules: [EmployeeScheduleDB]
    getAllEmployeeSchedulesById(empScheduleId: Long): EmployeeScheduleDB
    getAllEmployeeSchedulesByIds(empScheduleIds: [Long]): [EmployeeScheduleDB]

    #for prefix master
    fetchAllPrefixMaster(isActive: Boolean): [PrefixMasterSearch]
    fetchPrefixMasterUsingId(id: Long): PrefixMasterDB


    getAllPatientDetails: [PatientDetailsDB]


    # temporary masters
    getAllGenders: [Gender]
    getAllPatientTypes: [PatientType]
    getAllMaritalStatus: [MaritalStatus]
    getAllRelationship: [Relationship]
    getAllInsuranceType: [InsuranceType]

}

# MUTATION
type Mutation {
    # user details
    createUserInfo(employeeInfoInput: EmployeeInfoInput!): EmployeeInfoDB
    updateUserInfo(employeeInfoInput: EmployeeInfoInput!): EmployeeInfoDB
    createAdminInfo(employeeInfoInput: EmployeeInfoInput!): EmployeeInfoDB


    #one time password
    sendOTP(input: OneTimePasswordInput!): otpResponse
    verifyOTP(input: OneTimePasswordInput!) : otpResponse
    sendOTPForAdminRegistration(oneTimePasswordInput: OneTimePasswordInput!): otpResponse
    verifyOTPForAdminRegistration(oneTimePasswordInput: OneTimePasswordInput!) : otpResponse

    #login
    login(userCredentialsInput: UserCredentialsInput!): TokenResponse
    refreshToken(token: String!): TokenResponse

    # file upload
    uploadFile(file: Upload): String

    #business group
    createUpdateBusinessGroup(businessGroupInput: BusinessGroupInput!): BusinessGroupDB

    #abha details
    abhaGenerateOtp(abhaGenerateOtpInput: AbhaGenerateOtpInput!): AbhaGenerateOtpResponse
    abhaValidateOtp(abhaValidateOtpInput: AbhaValidateOtpInput!): AbhaValidateOtpResponse

    #patient details
    savePatientDetails(patientDetailsInput: PatientDetailsInput): PatientDetailsDB

}
